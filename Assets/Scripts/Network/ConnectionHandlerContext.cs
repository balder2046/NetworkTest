//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
namespace ClientNetwork
{
	public class ConnectionHandlerContext
	{
		bool isInbound;
		bool isOutbound;
		string name;
		public ConnectionHandlerContext (string name, ConnectionHandler handler, bool inbound, bool outbound)
		{
			this.name = name;
			this.handler = handler;
			this.isInbound = inbound;
			this.isOutbound = outbound;
		}
		public ConnectionHandlerContext (string name, ConnectionHandler handler):this(name, handler, handler is ConnectionInboundHandler, handler is OutboundHandlerAdapter)
		{

		}
		public string getName ()
		{
			return name;
		}
		public void Active ()
		{
			if (this.handler != null) {
				this.handler.active (this);
			}
		}
		public void Deactive ()
		{
			if (this.handler != null) {
				this.handler.deactive (this);
			}
		}
		public ConnectionHandlerContext getNextHandler ()
		{
			return next;
		}
		public void setNextHandler (ConnectionHandlerContext ctx)
		{
			ctx.next = this.next;
			ctx.pre = this;
			if (this.next != null) {
				this.next.pre = ctx;
			}
			this.next = ctx;

		}
		public ConnectionHandlerContext getPreHandler ()
		{
			return pre;
		}
		public void setPreHandler (ConnectionHandlerContext ctx)
		{
			ctx.next = this;
			ctx.pre = this.pre;
			if (this.pre != null) {
				this.pre.next = ctx;
			}
			this.pre = ctx;
			 
		}
		public ConnectionHandler getHandler ()
		{
			return handler;
		}
		ConnectionHandler handler;

		ConnectionHandlerContext next;
		ConnectionHandlerContext pre;
		public ConnectionHandlerContext nextInboundContext ()
		{
			ConnectionHandlerContext ctx = this;
			do {
				ctx = ctx.next;
			} while (ctx != null && !ctx.isInbound);
			return ctx;
		}
		public ConnectionHandlerContext nextOutboundContext ()
		{
			ConnectionHandlerContext ctx = this;
			do {
				ctx = ctx.pre;
			} while (ctx != null && !ctx.isOutbound);
			return ctx;
		}
		public void fireWrite (Object message)
		{
			ConnectionHandlerContext ctx = nextOutboundContext ();
			if (ctx == null)
				return;
			ctx.invokeWrite (message);
		}
		public void fireRead (Object message)
		{
			ConnectionHandlerContext ctx = nextInboundContext ();
			if (ctx == null)
				return;
//			System.Console.WriteLine ("receive bytes fire read");
			ctx.invokeRead (message);
		}
		public void readComplete ()
		{
			ConnectionHandlerContext ctx = nextInboundContext ();
			ctx.invokeReadComplete ();
		}
		public virtual void invokeWrite (Object message)
		{
			((OutboundHandlerAdapter)handler).write (this, message);
		}
		public virtual void invokeRead (Object message)
		{
			((ConnectionInboundHandler)handler).read (this, message);
		}
		public virtual void invokeReadComplete ()
		{
			((ConnectionInboundHandler)handler).readComplete (this);
		}
	

	}
}

