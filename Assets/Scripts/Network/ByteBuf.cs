//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.IO;
using System.Text;


namespace ClientNetwork
{
	public class ByteBuf
	{
		public static ByteBuf allocOne()
		{
			return new ByteBuf(new byte[65536]);
		}
        
		public static ByteBuf allocOne(int BufSize)
		{
			return new ByteBuf(new byte[BufSize]);
		}
		ByteBuf(byte[] buffer)
		{
			_buffer = buffer;


		}
		public void setWriteIndex(int index)
		{
			writerIndex = index;
            if (index < 0)
            {
                index++;
            }
		}
		public int getWriterIndex()
		{
			return writerIndex;
		}
		public int getReaderIndex()
		{
			return readerIndex;
		}
		public void setReaderIndex(int index)
		{
			readerIndex = index;
		}
		public int getCapacity()
		{
			return _buffer.Length;
		}
		byte[] _buffer = null;

		public byte[] getBuffer()
		{
			return _buffer;
		}
		public void DiscardReadedBytes()
		{
			int count = remainBytes();
			if (readerIndex > 0) {
				for (int i = 0; i < count; ++i) {
					_buffer [i] = _buffer [readerIndex + i];
				}
			}
			writerIndex = count;
			readerIndex = 0;

		}

	    public void Clear()
	    {
	        writerIndex = 0;
	        readerIndex = 0;
	    }
		public int remainBytes()
		{
			return writerIndex - readerIndex;
		}
		public int readInt32()
		{
			int ret = BitConverter.ToInt32(_buffer, readerIndex);
			readerIndex += 4;
			return ret;

		}

		public uint readUInt32()
		{
			uint ret = BitConverter.ToUInt32(_buffer, readerIndex);
			readerIndex += 4;
			return ret;
		}
		public byte readByte()
		{
			return _buffer [readerIndex++];
		}
		public void writeByte(byte val)
		{
			_buffer [writerIndex++] = val;
		}
		public short readInt16()
		{
			short ret = BitConverter.ToInt16(_buffer, readerIndex);
			readerIndex += 2;
			return ret;
		}
		public ushort readUInt16()
		{
			ushort ret = BitConverter.ToUInt16(_buffer, readerIndex);
			readerIndex += 2;
			return ret;
		}
		public long readInt64()
		{
			long ret = BitConverter.ToInt64(_buffer, readerIndex);
			readerIndex += 8;
			return ret;
		}
		public ulong readUInt64()
		{
			ulong ret = BitConverter.ToUInt64(_buffer, readerIndex);
			readerIndex += 8;
			return ret;
		}
		public float readFloat()
		{
			float ret = BitConverter.ToSingle(_buffer, readerIndex);
			readerIndex += 4;
			return ret;
		}
		public double readDouble()
		{
			double ret = BitConverter.ToDouble(_buffer, readerIndex);
			readerIndex += 8;
			return ret;
		}
		/*
		public String readString()
		{
			int len = readInt32();
			Encoding encoding = UTF8Encoding.Default;
			String ret = encoding.GetString(_buffer, readerIndex, len);
			readerIndex += len;
			return ret;
		}
		public void writeString(String val)
		{
			byte[] data = UTF8Encoding.Default.GetBytes(val);
			int len = data.Length;
			writeInt32(len);
			writeBytes(data);

		}*/
		public void writeBytes(byte[] bytes)
		{

			writeBytes(bytes, 0, bytes.Length);
		}
		public void writeBytes(byte[] bytes, int offset, int count)
		{
			for (int i = 0; i < count; ++i) {
				_buffer [writerIndex++] = bytes [i + offset];
			}
		}
		public void writeBytes(ByteBuf buf)
		{
            int maxSize = getCapacity() - writerIndex;
            int remainBytes = buf.remainBytes();
            if (remainBytes < maxSize)
            {
                maxSize = remainBytes;
            }
            writeBytes(buf.getBuffer(), buf.getReaderIndex(), maxSize);
            buf.skipReaderIndex(maxSize);
			
		}
		public void writeBytes(ByteBuf buf, int maxSize)
		{
			if (buf.remainBytes() > maxSize) {
				writeBytes(buf.getBuffer(), buf.getReaderIndex(), maxSize);
				buf.skipReaderIndex(maxSize);
			} else {
				writeBytes(buf);
			}
		}
		public void MakeBufferEmpty()
		{
			readerIndex = 0;
			writerIndex = 0;
		}
		public void skipReaderIndex(int skip)
		{
			readerIndex += skip;
		}
		public void writeInt16(short val)
		{
			_buffer [writerIndex++] = (byte)(val & 0xff);
			_buffer [writerIndex++] = (byte)((val >> 8) & 0xff);
		}
		public void writeInt32(int val)
		{
			_buffer [writerIndex++] = (byte)(val & 0xff);
			_buffer [writerIndex++] = (byte)((val >> 8) & 0xff);
			_buffer [writerIndex++] = (byte)((val >> 16) & 0xff);
			_buffer [writerIndex++] = (byte)((val >> 24) & 0xff);
		}
		public void writeInt64(long val)
		{
			_buffer [writerIndex++] = (byte)(val & 0xff);
			_buffer [writerIndex++] = (byte)((val >> 8) & 0xff);
			_buffer [writerIndex++] = (byte)((val >> 16) & 0xff);
			_buffer [writerIndex++] = (byte)((val >> 24) & 0xff);
			_buffer [writerIndex++] = (byte)((val >> 32) & 0xff);
			_buffer [writerIndex++] = (byte)((val >> 40) & 0xff);
			_buffer [writerIndex++] = (byte)((val >> 48) & 0xff);
			_buffer [writerIndex++] = (byte)((val >> 56) & 0xff);
		}
		public void writeUInt16(ushort val)
		{
			_buffer [writerIndex++] = (byte)(val & 0xff);
			_buffer [writerIndex++] = (byte)((val >> 8) & 0xff);
		}
		public void writeUInt32(uint val)
		{
			_buffer [writerIndex++] = (byte)(val & 0xff);
			_buffer [writerIndex++] = (byte)((val >> 8) & 0xff);
			_buffer [writerIndex++] = (byte)((val >> 16) & 0xff);
			_buffer [writerIndex++] = (byte)((val >> 24) & 0xff);
		}
		public void writeUInt64(ulong val)
		{
			_buffer [writerIndex++] = (byte)(val & 0xff);
			_buffer [writerIndex++] = (byte)((val >> 8) & 0xff);
			_buffer [writerIndex++] = (byte)((val >> 16) & 0xff);
			_buffer [writerIndex++] = (byte)((val >> 24) & 0xff);
			_buffer [writerIndex++] = (byte)((val >> 32) & 0xff);
			_buffer [writerIndex++] = (byte)((val >> 40) & 0xff);
			_buffer [writerIndex++] = (byte)((val >> 48) & 0xff);
			_buffer [writerIndex++] = (byte)((val >> 56) & 0xff);
		}
		public void writeDouble(double val)
		{
			long valL = BitConverter.DoubleToInt64Bits(val);
			writeInt64(valL);
		}
		public void writeSingle(float val)
		{
			byte[] data = BitConverter.GetBytes(val);
			writeBytes(data);
		}
		int readerIndex = 0;
		int writerIndex = 0;
		public override string ToString()
		{
			StringBuilder builder = new StringBuilder();
			builder.AppendLine("[ByteBuf]");
			builder.AppendFormat("reader {0} , writer {1} availiable bytes: {2}\n", readerIndex, writerIndex, remainBytes());
			builder.AppendLine("Contents");
			int remain = remainBytes();
			for (int i = 0; i < remain; ++i) {
				byte val = _buffer [readerIndex + i];
				builder.AppendFormat("{0} ", val.ToString("x2"));
				if (i % 8 == 0 && i > 0) {
					builder.AppendLine();
				}
			}
			return builder.ToString();

		}
	}
}

